#Использовать cmdline
#Использовать logos
#Использовать restler
#Использовать tempfiles
#Использовать asserts
#Использовать json
#Использовать strings

Перем ВозможныеКоманды;
Перем Лог;
Перем Логин;
Перем Пароль;
Перем ВерсияАПИ_ТФС;
Перем HTTPСоединение;

Процедура ОсновнаяРабота()

	СистемнаяИнформация = Новый СистемнаяИнформация;

	Лог = Логирование.ПолучитьЛог("oscript.app.vanessa-tfs");
	Лог.УстановитьРаскладку(ЭтотОбъект);
	// Лог.УстановитьУровень(УровниЛога.Отладка);

	ВозможныеКоманды = Новый Структура("get", "get");
	
	Парсер = Новый ПарсерАргументовКоманднойСтроки();
	
	ОписаниеКоманды = Парсер.ОписаниеКоманды(ВозможныеКоманды.get);
	Парсер.ДобавитьКоманду(ОписаниеКоманды);
	Парсер.ДобавитьИменованныйПараметр("--user", "Логин пользователя");
	Парсер.ДобавитьИменованныйПараметр("--password", "пароль пользователя (для TFS c http) или personal access token (для VSTS или TFS с https) ");
	Парсер.ДобавитьИменованныйПараметр("--collectionURI", "URL-ссылка на коллекцию TFS. Например, http://localhost:8080/tfs/Collection или https://aartbear.visualstudio.com");
	Парсер.ДобавитьИменованныйПараметр("--project", "Имя проекта TFS. Например, Project1");
	Парсер.ДобавитьИменованныйПараметр("--buildId", "ID выполненой сборки. Например, 341");
	Парсер.ДобавитьИменованныйПараметр("--out", "Путь сохраняемого файла. Например, file1.zip, d:\file2.zip");
	Парсер.ДобавитьИменованныйПараметр("--filter", "Фильтр по имени файла, выполняется поиск данной строки в имени файла. Например, file1, Version");

	Аргументы = Парсер.Разобрать(АргументыКоманднойСтроки);
	Если Аргументы.Количество() = 0 Тогда
		Парсер.ВывестиСправкуПоПараметрам();
	Иначе
		Логин = Аргументы["--user"];
		Пароль = Аргументы["--password"];

		Попытка
			СкачатьАртефакты(Аргументы["--collectionURI"], Аргументы["--project"], Аргументы["--buildId"], Аргументы["--filter"],
				Аргументы["--out"]);
		Исключение
			ВременныеФайлы.Удалить();
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
	
	Лог.Информация("ВСЕ!");
КонецПроцедуры

Процедура СкачатьАртефакты(Знач СсылкаНаКоллекцию, Знач ИмяПроекта, Знач ИдСборки, Знач ФильтрИмени, Знач КудаСохранять)
	ВерсияАПИ_ТФС = "2.0";
	
	ЛогРестлер = Логирование.ПолучитьЛог("oscript.lib.restler");
	ЛогРестлер.УстановитьУровень(ЛогРестлер.Уровень());
	ЛогРестлер.УстановитьРаскладку(ЭтотОбъект);
	
	СтруктураURI = СтруктураURI(СсылкаНаКоллекцию);
	СсылкаНаКоллекцию = СтрШаблон("%1://%2", СтруктураURI.Схема, СтруктураURI.ИмяСервера);
	Лог.Отладка("Разобрали адрес коллекции. Получили адрес сервера %1", СсылкаНаКоллекцию);
	Если Не ПустаяСтрока(СтруктураURI.ПутьНаСервере) Тогда
		Если Не ПустаяСтрока(ИмяПроекта) Тогда
			ИмяПроекта = СтрШаблон("%1/%2", СтруктураURI.ПутьНаСервере, ИмяПроекта);
		Иначе
			ИмяПроекта = СтруктураURI.ПутьНаСервере;
		КонецЕсли;
		Лог.Отладка("Разобрали адрес коллекции. Получили ресурс на сервере %1", ИмяПроекта);
	КонецЕсли;

	HTTPСоединение = Новый HTTPСоединение(СсылкаНаКоллекцию, , Логин, Пароль);
	
	ОписаниеАртефактов = СкачатьОписаниеАртефактов(ИмяПроекта, ИдСборки);
	Ожидаем.Что(ОписаниеАртефактов).ИмеетТип("Соответствие");
	
	// Ожидаем.Что(ОписаниеАртефактов["count"]).Равно(2);
	// Ожидаем.Что(ОписаниеАртефактов["value"]).ИмеетДлину(2);

	Строка0 = ОписаниеАртефактов["value"][0];

	// Ожидаем.Что(Строка0["name"]).Равно("ConfigVersion_341");
	// Ожидаем.Что(Строка0["resource"]["type"]).Равно("Container");
	// Ожидаем.Что(Строка0["resource"]["downloadUrl"]).ЭтоНе().Равно("");
	
	Лог.Информация("Нашли URL скачивания артефакта 
		|	%1", Строка0["resource"]["downloadUrl"]);
	
	Для каждого ОписаниеАртефакта Из ОписаниеАртефактов["value"] Цикл
		ИмяАртефакта = ОписаниеАртефакта["name"];
		Если ЗначениеЗаполнено(ФильтрИмени) И СтрНайти(НРег(ИмяАртефакта), НРег(ФильтрИмени)) = 0 Тогда
			Лог.Информация("Пропустили артефакт %1, т.к. он не подходит под переданный фильтр %2", ИмяАртефакта, ФильтрИмени);
			Продолжить;
		КонецЕсли;
		ПутьВыходногоФайла = СкачатьАртефакт(ОписаниеАртефакта, КудаСохранять);

		Если ЗначениеЗаполнено(ПутьВыходногоФайла) Тогда
			Лог.Информация("Распаковываю архив артефакта %1", ПутьВыходногоФайла);
			ЧтениеПакета = Новый ЧтениеZipФайла(ПутьВыходногоФайла);
			ЧтениеПакета.ИзвлечьВсе(КудаСохранять, РежимВосстановленияПутейФайловZIP.Восстанавливать);
		КонецЕсли;

	КонецЦикла;
КонецПроцедуры

Функция СкачатьОписаниеАртефактов(ИмяПроекта, ИдСборки)
	// Урл = СтрШаблон("%1/%2/_apis/build/builds/%3/artifacts?api-version=%4", 
	// СсылкаНаКоллекцию, ИмяПроекта, ИдСборки, ВерсияАПИ_ТФС);
	Урл = СтрШаблон("%1/%2/_apis/build/builds/%3/artifacts?api-version=%4", 
		"", ИмяПроекта, ИдСборки, ВерсияАПИ_ТФС);
	Лог.Отладка("УРЛ описания артефактов сборки %1", Урл);

	Клиент = ПолучитьВебКлиент(HTTPСоединение);
	
	ОписанияАртефактов = Клиент.Получить(Урл);
	
	ПарсерJSON  = Новый ПарсерJSON();
	JsonДокумент = ПарсерJSON.ЗаписатьJSON(ОписанияАртефактов);
	Лог.Отладка("JsonДокумент %1", JsonДокумент);

	Возврат ОписанияАртефактов;
КонецФункции

Функция СкачатьАртефакт(Знач ОписаниеАртефакта, Знач КудаСохранять)
	ТипАртефакта = ОписаниеАртефакта["resource"]["type"];
	Если ТипАртефакта <> "Container" Тогда
		Лог.Информация("Пропускаем артефакт с типом %1", ТипАртефакта);
		Возврат Неопределено;
	КонецЕсли;

	ИмяАртефакта = ОписаниеАртефакта["name"];
	Лог.Информация("Скачиваю артефакт %1", ИмяАртефакта);
	URL_файла = ОписаниеАртефакта["resource"]["downloadUrl"];

	Клиент = ПолучитьВебКлиент(HTTPСоединение);
	HTTPЗапрос = Клиент.ПолучитьHTTPЗапрос(URL_файла);

	ИмяВременногоФайла = ВременныеФайлы.НовоеИмяФайла();
	HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос, ИмяВременногоФайла);

	Для каждого КлючЗначение Из HTTPОтвет.Заголовки Цикл
		Лог.Отладка("Заголовок %1:%2", КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;

	ПутьФайла = HTTPОтвет.ПолучитьИмяФайлаТела();
	СообщениеОшибки = СтрШаблон("Должны были получить артефакт по имени артефакта, а его не удалось скачать. 
	|Имя %1", ОписаниеАртефакта["name"]);
	Ожидаем.Что(ПутьФайла, СообщениеОшибки).ЭтоНе().Равно(Неопределено);
	
	Ожидаем.Что(Новый Файл(ИмяВременногоФайла).Существует(), СообщениеОшибки).Равно(Истина);
	Ожидаем.Что(ПутьФайла, СообщениеОшибки).Равно(ИмяВременногоФайла);
	Ожидаем.Что(Новый Файл(ПутьФайла).Существует(), СообщениеОшибки).Равно(Истина);

	ПутьВыходногоФайла = "";
	ВыходнойФайл = Новый Файл(КудаСохранять);
	Если ВыходнойФайл.Существует() Тогда
		Если ВыходнойФайл.ЭтоКаталог() Тогда
			ПутьВыходногоФайла = ОбъединитьПути(ВыходнойФайл.ПолноеИмя, ИмяАртефакта);
		Иначе
			ПутьВыходногоФайла = ВыходнойФайл.ПолноеИмя;
		КонецЕсли;
	Иначе
		Если ВыходнойФайл.Имя = ВыходнойФайл.ИмяБезРасширения Тогда
			ПутьВыходногоФайла = ОбъединитьПути(ВыходнойФайл.ПолноеИмя, ИмяАртефакта);
		Иначе
			ПутьВыходногоФайла = ВыходнойФайл.ПолноеИмя;
		КонецЕсли;
	КонецЕсли;
	ВыходнойФайл = Новый Файл(ПутьВыходногоФайла);
	// Если ВыходнойФайл.Имя = ВыходнойФайл.ИмяБезРасширения Тогда
		ПутьВыходногоФайла = ОбъединитьПути(ВыходнойФайл.Путь, ВыходнойФайл.Имя + ".zip");
	// КонецЕсли;

	ВыходнойФайл = Новый Файл(ПутьВыходногоФайла);
	Если ВыходнойФайл.Существует() Тогда
		УдалитьФайлы(ВыходнойФайл.ПолноеИмя);
	КонецЕсли;
	
	Лог.Информация("Перемещаем полученный артефакт в <%1>", ПутьВыходногоФайла);
	ПереместитьФайл(ПутьФайла, ПутьВыходногоФайла);

	СообщениеОшибки = СтрШаблон("Должны были получить результирующий файл, а его не удалось скачать. 
	|Путь файла %1", ПутьВыходногоФайла);
	Ожидаем.Что(ВыходнойФайл.Существует(), СообщениеОшибки).Равно(Истина);

	Возврат ПутьВыходногоФайла;
КонецФункции

Функция ПолучитьВебКлиент(Знач HTTPСоединение)
	Клиент = Новый КлиентВебAPI();
	Клиент.ИспользоватьСоединение(HTTPСоединение);
	СтрокаЛогинПароль = СтрШаблон("%1:%2", Логин, Пароль);
	Лог.Отладка("логин:пароль это %1", СтрокаЛогинПароль);
	
	ИмяВременногоФайла = ВременныеФайлы.НовоеИмяФайла();
    ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаТекста.UTF8NoBOM);
    ЗаписьТекста.Записать(СтрокаЛогинПароль);
    ЗаписьТекста.Закрыть();

	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);

	СтрокаЛогинПароль = Base64Строка(ДвоичныеДанные);
	Лог.Отладка("Base64Строка для логин:пароль это %1", СтрокаЛогинПароль);

	Заголовки = Новый Соответствие;
	Заголовки.Вставить("authorization", СтрШаблон("Basic %1==", СтрокаЛогинПароль));
	Клиент.УстановитьЗаголовки(Заголовки);

	Возврат Клиент;
КонецФункции

// Разбирает строку URI на составные части и возвращает в виде структуры.
// На основе RFC 3986.
//
// Параметры:
//  СтрокаURI - Строка - ссылка на ресурс в формате:
//                       <схема>://<логин>:<пароль>@<хост>:<порт>/<путь>?<параметры>#<якорь>.
//
// Возвращаемое значение:
//  Структура - составные части URI согласно формату:
//   * Схема         - Строка - схема из URI.
//   * Логин         - Строка - логин из URI.
//   * Пароль        - Строка - пароль из URI.
//   * ИмяСервера    - Строка - часть <хост>:<порт> из URI.
//   * Хост          - Строка - хост из URI.
//   * Порт          - Строка - порт из URI.
//   * ПутьНаСервере - Строка - часть <путь>?<параметры>#<якорь> из URI.
//
Функция СтруктураURI(Знач СтрокаURI) Экспорт
	Перем Логин, Пароль, Схема;

	СтрокаURI = СокрЛП(СтрокаURI);
	
	// схема
	Схема = "";
	Позиция = СтрНайти(СтрокаURI, "://");
	Если Позиция > 0 Тогда
		Схема = НРег(Лев(СтрокаURI, Позиция - 1));
		СтрокаURI = Сред(СтрокаURI, Позиция + 3);
	КонецЕсли;

	// Строка соединения и путь на сервере.
	СтрокаСоединения = СтрокаURI;
	ПутьНаСервере = "";
	Позиция = СтрНайти(СтрокаСоединения, "/");
	Если Позиция > 0 Тогда
		ПутьНаСервере = Сред(СтрокаСоединения, Позиция + 1);
		СтрокаСоединения = Лев(СтрокаСоединения, Позиция - 1);
	КонецЕсли;
		
	// Информация пользователя и имя сервера.
	СтрокаАвторизации = "";
	ИмяСервера = СтрокаСоединения;
	Позиция = СтрНайти(СтрокаСоединения, "@");
	Если Позиция > 0 Тогда
		СтрокаАвторизации = Лев(СтрокаСоединения, Позиция - 1);
		ИмяСервера = Сред(СтрокаСоединения, Позиция + 1);
	КонецЕсли;
	
	// логин и пароль
	Логин = СтрокаАвторизации;
	Пароль = "";
	Позиция = СтрНайти(СтрокаАвторизации, ":");
	Если Позиция > 0 Тогда
		Логин = Лев(СтрокаАвторизации, Позиция - 1);
		Пароль = Сред(СтрокаАвторизации, Позиция + 1);
	КонецЕсли;
	
	// хост и порт
	Хост = ИмяСервера;
	Порт = "";
	Позиция = СтрНайти(ИмяСервера, ":");
	Если Позиция > 0 Тогда
		Хост = Лев(ИмяСервера, Позиция - 1);
		Порт = Сред(ИмяСервера, Позиция + 1);
		Если Не СтроковыеФункции.ТолькоЦифрыВСтроке(Порт) Тогда
			Порт = "";
		КонецЕсли;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Схема", Схема);
	Результат.Вставить("Логин", Логин);
	Результат.Вставить("Пароль", Пароль);
	Результат.Вставить("ИмяСервера", ИмяСервера);
	Результат.Вставить("Хост", Хост);
	Результат.Вставить("Порт", ?(ПустаяСтрока(Порт), Неопределено, Число(Порт)));
	Результат.Вставить("ПутьНаСервере", ПутьНаСервере);
	
	Возврат Результат;
	
КонецФункции

Функция Форматировать(Знач Уровень, Знач Сообщение) Экспорт

	Возврат СтрШаблон("%1: %2 - %3", ТекущаяДата(), УровниЛога.НаименованиеУровня(Уровень), Сообщение);

КонецФункции

ОсновнаяРабота();
